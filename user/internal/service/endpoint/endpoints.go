// Code generated by Godin v0.3.0.
// This file can be modified, it will NOT be overwritten by godin.

package endpoint

import (
    "context"
    "github.com/go-kit/kit/endpoint"

    "github.com/lukasjarosch/godin-examples/user/internal/service"
)



// CreateEndpoint provides service.Create() as general endpoint
// which can be used with arbitrary transport layers.
func CreateEndpoint(service service.User) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(CreateRequest)
		_ = req // bypass "declared and not used" compiler error if the request is empty and not used
		user, err := service.Create(ctx, req.Username, req.Email)

		return CreateResponse{
			User: user,
			Err:  err,
		}, err
	}
}

// GetEndpoint provides service.Get() as general endpoint
// which can be used with arbitrary transport layers.
func GetEndpoint(service service.User) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetRequest)
		_ = req // bypass "declared and not used" compiler error if the request is empty and not used
		user, err := service.Get(ctx, req.Id)

		return GetResponse{
			User: user,
			Err:  err,
		}, err
	}
}

// ListEndpoint provides service.List() as general endpoint
// which can be used with arbitrary transport layers.
func ListEndpoint(service service.User) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(ListRequest)
		_ = req // bypass "declared and not used" compiler error if the request is empty and not used
		users, err := service.List(ctx)

		return ListResponse{
			Users: users,
			Err:   err,
		}, err
	}
}


// DeleteEndpoint provides service.Delete() as general endpoint
// which can be used with arbitrary transport layers.
func DeleteEndpoint(service service.User) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(DeleteRequest)
		_ = req // bypass "declared and not used" compiler error if the request is empty and not used
		err := service.Delete(ctx, req.Id)

		return DeleteResponse{
			Err: err,
		}, err
	}
}