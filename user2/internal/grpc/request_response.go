// Code generated by Godin vv0.4.0; DO NOT EDIT.

package grpc

import (
	"context"
	"errors"

	pb "yyy"
	"yyy/internal/service/endpoint"
)

// EncodeHelloRequest is used in the server and encodes a domain-level request into a gRPC request
func EncodeHelloRequest(ctx context.Context, request interface{}) (pbRequest interface{}, err error) {
	if request == nil {
		return nil, errors.New("nil HelloRequest")
	}
	req := request.(endpoint.HelloRequest)
	pbRequest, err = HelloRequestEncoder(req)
	if err != nil {
		return nil, err
	}
	return pbRequest, nil
}

// DecodeHelloResponse is used in the server and decodes a gRPC response into a domain-level response
func DecodeHelloResponse(ctx context.Context, pbResponse interface{}) (response interface{}, err error) {
	if pbResponse == nil {
		return nil, errors.New("nil HelloResponse")
	}
	res := pbResponse.(*pb.HelloResponse)
	response, err = HelloResponseDecoder(res)
	if err != nil {
		return nil, err
	}
	return response, nil
}

// EncodeHelloResponse is used in the client and encodes a domain-level response into a gRPC response
func EncodeHelloResponse(ctx context.Context, response interface{}) (pbResponse interface{}, err error) {
	if response == nil {
		return nil, errors.New("nil HelloResponse")
	}
	res := response.(endpoint.HelloResponse)
	pbResponse, err = HelloResponseEncoder(res)
	if err != nil {
		return nil, err
	}
	return pbResponse, nil
}

// DecodeHelloRequest is used in the client and decodes a gRPC request into a domain-level request
func DecodeHelloRequest(ctx context.Context, pbRequest interface{}) (request interface{}, err error) {
	if pbRequest == nil {
		return nil, errors.New("nil HelloRequest")
	}
	req := pbRequest.(*pb.HelloRequest)
	request, err = HelloRequestDecoder(req)
	if err != nil {
		return nil, err
	}
	return request, nil
}
