// Code generated by Godin vv0.4.0; DO NOT EDIT.

package grpc

import (
	"context"

	kitGrpc "github.com/go-kit/kit/transport/grpc"

	pb "github.com/lukasjarosch/godin-examples/user/api"
	"github.com/lukasjarosch/godin-examples/user/internal/service/endpoint"
	"github.com/lukasjarosch/godin/pkg/log"
)

type grpcServer struct {
	CreateHandler kitGrpc.Handler
	GetHandler    kitGrpc.Handler
	ListHandler   kitGrpc.Handler
	DeleteHandler kitGrpc.Handler
}

func NewServer(endpoints endpoint.Set, logger log.Logger) pb.UserServiceServer {
	// TODO: configurable ServerOptions via godin.json
	options := []kitGrpc.ServerOption{}

	return &grpcServer{
		CreateHandler: kitGrpc.NewServer(
			endpoints.CreateEndpoint,
			DecodeCreateRequest,
			EncodeCreateResponse,
			append(options)...,
		),
		GetHandler: kitGrpc.NewServer(
			endpoints.GetEndpoint,
			DecodeGetRequest,
			EncodeGetResponse,
			append(options)...,
		),
		ListHandler: kitGrpc.NewServer(
			endpoints.ListEndpoint,
			DecodeListRequest,
			EncodeListResponse,
			append(options)...,
		),
		DeleteHandler: kitGrpc.NewServer(
			endpoints.DeleteEndpoint,
			DecodeDeleteRequest,
			EncodeDeleteResponse,
			append(options)...,
		),
	}
}

func (s *grpcServer) Create(ctx context.Context, req *pb.CreateRequest) (*pb.CreateResponse, error) {
	_, resp, err := s.CreateHandler.ServeGRPC(ctx, req)
	if err != nil {
		return nil, EncodeError(err)
	}
	return resp.(*pb.CreateResponse), nil
}

func (s *grpcServer) Get(ctx context.Context, req *pb.GetRequest) (*pb.GetResponse, error) {
	_, resp, err := s.GetHandler.ServeGRPC(ctx, req)
	if err != nil {
		return nil, EncodeError(err)
	}
	return resp.(*pb.GetResponse), nil
}

func (s *grpcServer) List(ctx context.Context, req *pb.ListRequest) (*pb.ListResponse, error) {
	_, resp, err := s.ListHandler.ServeGRPC(ctx, req)
	if err != nil {
		return nil, EncodeError(err)
	}
	return resp.(*pb.ListResponse), nil
}

func (s *grpcServer) Delete(ctx context.Context, req *pb.DeleteRequest) (*pb.EmptyResponse, error) {
	_, resp, err := s.DeleteHandler.ServeGRPC(ctx, req)
	if err != nil {
		return nil, EncodeError(err)
	}
	return resp.(*pb.EmptyResponse), nil
}
