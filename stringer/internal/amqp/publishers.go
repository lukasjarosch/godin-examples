// Code generated by Godin v0.4.0; DO NOT EDIT.
package amqp

import (
	"context"
	"github.com/pkg/errors"

	"github.com/go-godin/grpc-metadata"
	"github.com/go-godin/log"
	"github.com/go-godin/rabbitmq"
)

type PublisherSet struct {
	logger      log.Logger
	userCreated rabbitmq.Publisher
}

// Publishers will initialize all AMQP publishers. Each publisher will receive it's own channel to work on
// to reduce TCP pressure in times of high load.
func Publishers(conn *rabbitmq.RabbitMQ, loggger log.Logger) PublisherSet {
	userCreatedChannel, _ := conn.NewChannel()

	return PublisherSet{
		logger: loggger,
		userCreated: rabbitmq.NewPublisher(
			userCreatedChannel,
			&rabbitmq.Publishing{
				Topic:        "user.created",
				Exchange:     "exchange-name",
				DeliveryMode: 2,
			},
		),
	}
}
func (pub PublisherSet) PublishUserCreated(ctx context.Context, event interface{}) error {
	logger := pub.logger.With("topic", "user.created", "exchange", "exchange-name", "requestId", grpc_metadata.GetRequestID(ctx))

	evt, err := UserCreatedEncoder(event)
	if err != nil {
		logger.Error("failed to encode event", "event", event)
		return errors.Wrap(err, "failed to encode event")
	}

	if err := pub.userCreated.Publish(ctx, evt); err != nil {
		logger.Error("failed to publish event", "err", err)
		return errors.Wrap(err, "failed to publish to 'user.created'")
	}

	logger.Info("published 'user.created' event")
	return nil
}
