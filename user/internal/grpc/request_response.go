// Code generated by Godin v0.3.0; DO NOT EDIT.

package grpc

import (
	"context"
	"errors"

	pb "github.com/lukasjarosch/godin-examples/user/api"
	"github.com/lukasjarosch/godin-examples/user/internal/service/endpoint"
)

// EncodeCreateRequest is used in the server and encodes a domain-level request into a gRPC request
func EncodeCreateRequest(ctx context.Context, request interface{}) (pbRequest interface{}, err error) {
	if request == nil {
		return nil, errors.New("nil CreateRequest")
	}
	req := request.(endpoint.CreateRequest)
	pbRequest, err = CreateRequestEncoder(req)
	if err != nil {
		return nil, err
	}
	return pbRequest, nil
}

// DecodeCreateResponse is used in the server and decodes a gRPC response into a domain-level response
func DecodeCreateResponse(ctx context.Context, pbResponse interface{}) (response interface{}, err error) {
	if pbResponse == nil {
		return nil, errors.New("nil CreateResponse")
	}
	res := pbResponse.(*pb.CreateResponse)
	response, err = CreateResponseDecoder(res)
	if err != nil {
		return nil, err
	}
	return response, nil
}

// EncodeCreateResponse is used in the client and encodes a domain-level response into a gRPC response
func EncodeCreateResponse(ctx context.Context, response interface{}) (pbResponse interface{}, err error) {
	if response == nil {
		return nil, errors.New("nil CreateResponse")
	}
	res := response.(endpoint.CreateResponse)
	pbResponse, err = CreateResponseEncoder(res)
	if err != nil {
		return nil, err
	}
	return pbResponse, nil
}

// DecodeCreateRequest is used in the client and decodes a gRPC request into a domain-level request
func DecodeCreateRequest(ctx context.Context, pbRequest interface{}) (request interface{}, err error) {
	if pbRequest == nil {
		return nil, errors.New("nil CreateRequest")
	}
	req := pbRequest.(*pb.CreateRequest)
	request, err = CreateRequestDecoder(req)
	if err != nil {
		return nil, err
	}
	return request, nil
}


// EncodeGetRequest is used in the server and encodes a domain-level request into a gRPC request
func EncodeGetRequest(ctx context.Context, request interface{}) (pbRequest interface{}, err error) {
	if request == nil {
		return nil, errors.New("nil GetRequest")
	}
	req := request.(endpoint.GetRequest)
	pbRequest, err = GetRequestEncoder(req)
	if err != nil {
		return nil, err
	}
	return pbRequest, nil
}


// EncodeGetResponse is used in the client and encodes a domain-level response into a gRPC response
func EncodeGetResponse(ctx context.Context, response interface{}) (pbResponse interface{}, err error) {
	if response == nil {
		return nil, errors.New("nil GetResponse")
	}
	res := response.(endpoint.GetResponse)
	pbResponse, err = GetResponseEncoder(res)
	if err != nil {
		return nil, err
	}
	return pbResponse, nil
}

// DecodeGetRequest is used in the client and decodes a gRPC request into a domain-level request
func DecodeGetRequest(ctx context.Context, pbRequest interface{}) (request interface{}, err error) {
	if pbRequest == nil {
		return nil, errors.New("nil GetRequest")
	}
	req := pbRequest.(*pb.GetRequest)
	request, err = GetRequestDecoder(req)
	if err != nil {
		return nil, err
	}
	return request, nil
}


// DecodeGetResponse is used in the server and decodes a gRPC response into a domain-level response
func DecodeGetResponse(ctx context.Context, pbResponse interface{}) (response interface{}, err error) {
	if pbResponse == nil {
		return nil, errors.New("nil GetResponse")
	}
	res := pbResponse.(*pb.GetResponse)
	response, err = GetResponseDecoder(res)
	if err != nil {
		return nil, err
	}
	return response, nil
}


// EncodeListRequest is used in the server and encodes a domain-level request into a gRPC request
func EncodeListRequest(ctx context.Context, request interface{}) (pbRequest interface{}, err error) {
	if request == nil {
		return nil, errors.New("nil ListRequest")
	}
	req := request.(endpoint.ListRequest)
	pbRequest, err = ListRequestEncoder(req)
	if err != nil {
		return nil, err
	}
	return pbRequest, nil
}


// EncodeListResponse is used in the client and encodes a domain-level response into a gRPC response
func EncodeListResponse(ctx context.Context, response interface{}) (pbResponse interface{}, err error) {
	if response == nil {
		return nil, errors.New("nil ListResponse")
	}
	res := response.(endpoint.ListResponse)
	pbResponse, err = ListResponseEncoder(res)
	if err != nil {
		return nil, err
	}
	return pbResponse, nil
}

// DecodeListRequest is used in the client and decodes a gRPC request into a domain-level request
func DecodeListRequest(ctx context.Context, pbRequest interface{}) (request interface{}, err error) {
	if pbRequest == nil {
		return nil, errors.New("nil ListRequest")
	}
	req := pbRequest.(*pb.ListRequest)
	request, err = ListRequestDecoder(req)
	if err != nil {
		return nil, err
	}
	return request, nil
}


// DecodeListResponse is used in the server and decodes a gRPC response into a domain-level response
func DecodeListResponse(ctx context.Context, pbResponse interface{}) (response interface{}, err error) {
	if pbResponse == nil {
		return nil, errors.New("nil ListResponse")
	}
	res := pbResponse.(*pb.ListResponse)
	response, err = ListResponseDecoder(res)
	if err != nil {
		return nil, err
	}
	return response, nil
}


// EncodeDeleteRequest is used in the server and encodes a domain-level request into a gRPC request
func EncodeDeleteRequest(ctx context.Context, request interface{}) (pbRequest interface{}, err error) {
	if request == nil {
		return nil, errors.New("nil DeleteRequest")
	}
	req := request.(endpoint.DeleteRequest)
	pbRequest, err = DeleteRequestEncoder(req)
	if err != nil {
		return nil, err
	}
	return pbRequest, nil
}


// EncodeDeleteResponse is used in the client and encodes a domain-level response into a gRPC response
func EncodeDeleteResponse(ctx context.Context, response interface{}) (pbResponse interface{}, err error) {
	if response == nil {
		return nil, errors.New("nil DeleteResponse")
	}
	res := response.(endpoint.DeleteResponse)
	pbResponse, err = DeleteResponseEncoder(res)
	if err != nil {
		return nil, err
	}
	return pbResponse, nil
}

// DecodeDeleteRequest is used in the client and decodes a gRPC request into a domain-level request
func DecodeDeleteRequest(ctx context.Context, pbRequest interface{}) (request interface{}, err error) {
	if pbRequest == nil {
		return nil, errors.New("nil DeleteRequest")
	}
	req := pbRequest.(*pb.DeleteRequest)
	request, err = DeleteRequestDecoder(req)
	if err != nil {
		return nil, err
	}
	return request, nil
}


// DecodeDeleteResponse is used in the server and decodes a gRPC response into a domain-level response
func DecodeDeleteResponse(ctx context.Context, pbResponse interface{}) (response interface{}, err error) {
	if pbResponse == nil {
		return nil, errors.New("nil DeleteResponse")
	}
	res := pbResponse.(*pb.EmptyResponse)
	response, err = DeleteResponseDecoder(res)
	if err != nil {
		return nil, err
	}
	return response, nil
}
